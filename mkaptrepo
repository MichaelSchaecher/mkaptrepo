#!/usr/bin/env bash

# mkaptrepo - A script to create a help manage apt repository
# Copyright (C) 2025  Michael L. Schaecher <MichaelLeeSchaecher@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

function monitor_repo() {

    cd "$_dirPath/$_repositoryName" || { echo "$_dirPath/$_repositoryName does not exist." >&2 ; exit 1 ; }

    local _pwdDir _packageList _upgraded _date

    _pwdDir="$(pwd)"
    _packageList="dists/stable/main/binary-amd64/Packages"


    inotifywait -m -e create,delete,modify,move -r pool/ | while read -r directory events filename; do
        update_repo || {
            echo "Failed to update repository after changes in $directory: $events on $filename" >&2
            exit 1
        }

    done
}

function update_repo () {

    echo "Detected changes in $directory: $events on $filename"

    # shellcheck disable=SC2086
    dpkg-scanpackages --arch amd64 pool/ > $_packageList || {
        echo "dpkg-scanpackages failed, please check your package files!" >&2
        exit 1
    }

    # Remove `./` prefix from the package list
    sed -i "s|\ ./||g" "$_packageList"

    gzip -k -f "$_packageList"
    xz -k -f "$_packageList"

    gen_release || { echo "Generating Release file failed!" >&2 ; exit 1 ; }
    git_commit || { echo "git commit failed!" >&2 ; exit 1 ; }

    cd "$_pwdDir" || exit 1

    # Check if mkaptrepo was updated during apt update
    _upgraded="$(zgrep "$_appName" /var/log/dpkg.log* | grep 'upgrade' |
    tail -n 1 | sed 's/ ^*[0-9][0-9]//g')"

    _date="$(date +%Y-%m-%d)"

    # Compare the date of the last upgrade with the current date
    if test "$_date" = "$_upgraded" ; then
        systemctl --user restart mkaptrepo.service > /dev/null 2>&1 || true
    fi

}

function do_hash () {

    local hashName hashCmd

    hashName=$1
    hashCmd=$2

    echo "${hashName}:"

    find ./main -type f | while read -r f; do

        f=$(echo "${f}" | cut -c3-) # remove ./ prefix
        test "${f}" != "Release" || continue

        echo " $(${hashCmd} "${f}"  | cut -d" " -f1) $(wc -c "${f}")"

    done

    sed -i "s|$_dirPath/||g" Release
}

function git_commit() {

    git add .

    local commitMessage

    # Generate a commit message based on what has changed use `git status`
    # to get the list of changed files
    for status in R M A C D; do
        git status --porcelain | grep "^${status}" | while read -r line; do
            file=$(echo "$line" | cut -c4-)
            commitMessage="Update ${file} with package details and description"
        done
    done

    git commit -m "${commitMessage:-"Update repository"}" || {
        echo "git commit failed, no changes to commit." >&2
        return 1
    }

    git push origin main || { echo "git push failed!" >&2 ; exit 1 ; }
}

function gen_release () {

        cd "dists/stable" || exit 1

        rm -fv Release Release.gpg InRelease

        echo "$_releaseFile" > Release

        for algo in "MD5Sum md5sum" "SHA1 sha1sum" "SHA256 sha256sum"; do
            read -r hashName hashCmd <<< "$algo"
            do_hash "$hashName" "$hashCmd" >> Release
        done >> Release

        gpg --default-key HowToNebie -abs -o Release.gpg Release
        gpg --default-key HowToNebie --clearsign -o InRelease Release

        test "$?" -eq "0" || { echo "Singing the Release file failed!" >&2 ; exit 1 ; }

}

function create_repo () {

    local _arch _repo _release _populate _license

    # Set default value from the configuration file
    _arch="${_architectures}"
    _release="${_codename}"
    _populate="no"

    _licenseLink="https://raw.githubusercontent.com/MichaelSchaecher/license-templates/refs/heads/main/licenses"
    _license="GPL-3"

    # _licenseTypes=("AGPL-3.0" "Apache-2.0-License" "BSD-2Simplified-License" "BSD-3Clause-New-License"
    #     "CDDL" "EclipsePublicLicense" "GPL-2" "GPL-3" LGPL-2.1" "LGPL-3" "MIT" "MPL-2.0"
    #     "Mozilla-Public-License-2.0")
    _licenseTypes=(
        "AGPL-3" "Apache-2" "BSD-2" "BSD-3" "CDDL" "Eclipse-Public-License"
        "GPL-2" "GPL-3" "LGPL-2" "LGPL-3" "MIT" "Mozilla-Public-License-2"
    )

    _alphaDir=(
        "a" "b" "c" "d" "e" "f" "g" "h" "i" "j"
        "k" "l" "m" "n" "o" "p" "q" "r" "s" "t"
        "u" "v" "w" "x" "y" "z"
    )

    shift

    while true ; do case "$1" in
        -a|--arch               )
            if [[ "$2" =~ ^[a-zA-Z0-9-]+$ ]] ; then
                _arch="$2" ; shift
            else
                echo "Invalid architecture specified: $2" >&2
                exit 1
            fi
        ;;
        -r|--release            )
            if [[ "$2" =~ ^[a-z] ]] ; then
                _release="$2" ; shift
            else
                echo "Invalid release codename specified: $2" >&2
                exit 1
            fi
        ;;
        -n|--name             )
            test -n "$2" || { echo "Parent directory is not specified!" >&2 ; exit 1 ; }
            mkdir -pv "$_dirPath/$2" || { echo "Failed to create directory $_dirPath/$2" >&2 ; exit 1 ; }
            _repo="${_dirPath}/$2"
            shift
        ;;
        -p|--populate           ) _populate="yes"              ; shift           ;;
        -l|--license            )
            if [[ " ${_licenseTypes[*]} " == *" $2 "* ]] ; then
                _license="$2" ; shift
            else
                echo "Invalid license specified: $2." >&2
                echo "Available licenses: ${_licenseTypes[*]}" >&2
                exit 1
            fi
        ;;
        --help | -h             ) echo "${_createRepoHelp}"    ; exit 0          ;;
        *                       ) if test -n "$2" ; then shift ; else break ; fi ;;
    esac ; done

    cd "$_repo"

    # Setup the dists directory structure
    echo "Create directory structure in $_repo"

    mkdir -p "dists/$_release/main/binary-$_arch" "pool" || {
        echo "Failed to create directory structure in $_repo" >&2 ; exit 1 ; }

    if test "$_populate" = "yes" ; then
        # Populate the repository with example packages
        echo "Create alphabetical directory structure in pool/$_release/main"
        for dir in "${_alphaDir[@]}" ; do
            mkdir -p "pool/main/${dir}" || {
                echo "Failed to create directory pool/$_release/main/${dir}" >&2 ; exit 1 ; }
        done

        # Add placeholder files to the pool directory for each architecture. This
        # is to help with Git to track even empty directories.
        for dir in "${_alphaDir[@]}" ; do
            touch "pool/main/${dir}/placeholder-${_arch}.txt" || {
                echo "Failed to create placeholder document!" >&2 ; exit 1 ; }
        done
    fi

    git init || { echo "Failed to initialize git repository in $_repo" >&2 ; exit 1 ; }

    echo "Downloading ${_license} license."
    wget -qc "${_licenseLink}/${_license}.txt" -O "LICENSE" || {
        echo "Failed to download ${_license} license!" >&2 ; exit 1 ; }

    echo "Generating README file."

    # shellcheck disable=SC2002
    cat "${_readmeFile}" |
        sed "s|Maintainer: |Maintainer: $_maintainer|" |
        sed "s|Date: |Date: $(date -R)|" |
        sed "s|License: |License: <a href=\"LICENSE\">${_license}</a>|" > README.md || {
        echo "Failed to generate README file!" >&2 ; exit 1 ; }

}

set -eo pipefail

_appName="mkaptrepo"
_appVersion="$(cat /usr/share/doc/${_appName}/version.txt 2>/dev/null || echo "unknown")"

_home="${HOME}"

_editor="${EDITOR:-nano}"

# Source the configuration file if it exists
# shellcheck disable=SC1090
source "${_home}/.config/${_appName}/${_appName}.conf" 2>/dev/null || {
    echo "Configuration file not found!" >&2 ; exit 1 ; }

_repositoryName="${REPOSITORY_NAME}"
_origin="${ORIGIN:-repository}"
_label="${LABEL:-$_origin}"
_suite="${SUITE:-stable}"
_codename="${CODENAME:-stable}"
_architectures="${ARCHITECTURES:-$(dpkg --print-architecture)}"
_components="${COMPONENTS:-main}"
_maintainer="${MAINTAINER:-$(git config user.name) <$(git config user.email)>}"
_dirPath="${DIR_PATH}"

_readmeFile="$(pwd)/readme-template.md"

test -n "$_maintainer" || { echo "Maintainer is not set in the configuration file!" >&2 ; exit 1 ; }
test -n "$_dirPath" || { echo "Directory path is not set in the configuration file!" >&2 ; exit 1 ; }

_releaseFile="$(cat <<EOF
Origin: $_origin
Label: $_label
Suite: $_suite
Codename: $_codename
Version: 1.0
Architectures: $_architectures
Components: $_components
Description: Publicly available APT repository for $_origin
Maintainer: $_maintainer
Date: $(date -Ru)
EOF
)"

_versionInfo="$(cat <<EOF
${_appName} ( version: ${_appVersion}  -  license: GPLv3.0 )
EOF
)"

_helpInfo="$(cat <<EOF
${_versionInfo}

Usage: ${_appName} [OPTION]...

Options
    update                      Update the package list and generate the Release file.
    monitor                     Monitor the repository for changes and update the package list.
    daemonize                   Enable the systemd service for current user: see \`man mkaptrepo\`
                                for more information.
    create                      Create a new apt repository (for more information, add --help).
    config                      Install the configuration file to \`~/.config/mkaptrepo/mkaptrepo.conf\`
                                and exit.
    help                        Show this help message and exit.
    version                     Show version information and exit.

Copyright (C) 2025 ${_maintainer}
EOF
)"

_createRepoHelp="$(cat <<EOF
${_versionInfo}

Usage: ${_appName} create [OPTIONS] ARG...

Options:
    -a, --arch <arch>           Specify the architecture for the repository (default: \`$(dpkg --print-architecture)\`).
    -r, --release <codename>    Specify the codename for the release (default: \`stable\`).
    -n, --name <name>           Specify the name of the repository directory.
    -p, --populate              Populate the repository with alphabetical directory structure and placeholder files.
    -l, --license <license>     Specify the license for the repository (default: \`GPL-3\`).
    -h, --help                  Show this help message and exit.

Copyright (C) 2025 ${_maintainer}
EOF
)"

# Install the configuration file if it does not exist
if test ! -f "${_home}/.config/${_appName}/${_appName}.conf" ; then
    mkdir -p "${_home}/.config/${_appName}"
    cp -a /usr/share/${_appName}/${_appName}.conf "${_home}/.config/${_appName}/"
    ${_editor} "${_home}/.config/${_appName}/${_appName}.conf" || {
        echo "Failed to open configuration file in editor!" >&2 ; exit 1 ; }
fi

case "$1" in
    update                      ) update_repo            ;;
    monitor                     ) monitor_repo           ;;
    daemonize                   )
        systemctl enable --now --user mkaptrepo.service || {
            echo "Failed to enable mkaptrepo service." >&2
            exit 1
        }
    ;;
    create                      ) create_repo "$@"       ;;
    config                      )
        test ! -f "${_home}/.config/${_appName}/mkaptrepo.conf" || $_editor "${_home}/.config/${_appName}/mkaptrepo.conf"
    ;;
    help                        ) echo "${_helpInfo}"    ;;
    version                     ) echo "${_versionInfo}" ;;
    *                           )
        echo "Unrecognized option: $1 called see \`${_appName} help\` for usage information."
        exit 1
    ;;
esac

wait ; exit 0
