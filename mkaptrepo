#!/usr/bin/env bash

# mkaptrepo - A script to create a help manage apt repository
# Copyright (C) 2025  Michael L. Schaecher <MichaelLeeSchaecher@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

function monitor_repo() {

    cd "$_repoPath/$_repositoryName" || { echo "$_repoPath/$_repositoryName does not exist." >&2 ; exit 1 ; }

    local pwdDir packageList

    pwdDir="$(pwd)"
    packageList="$_packageList"


    inotifywait -m -e create,delete,modify,move -r ./pool | while read -r directory events filename; do
        echo "Detected changes in $directory: $events on $filename"

        # shellcheck disable=SC2086
        dpkg-scanpackages --arch amd64 ./pool > ${packageList} || {
            echo "dpkg-scanpackages failed, please check your package files." >&2
            exit 1
        }

        # Remove `./` prefix from the package list
        sed -i "s|^\./||g" "$_packageList"

        gzip -k -f "$_packageList"
        xz -k -f "$_packageList"

        gen_release || { echo "Generating Release file failed!" >&2 ; exit 1 ; }
        git_commit || { echo "git commit failed!" >&2 ; exit 1 ; }

        cd "$pwdDir" || exit 1

    done
}

function do_hash () {

    local hashName hashCmd

    hashName=$1
    hashCmd=$2

    echo "${hashName}:"

    find ./main -type f | while read -r f; do

        f=$(echo "${f}" | cut -c3-) # remove ./ prefix
        test "${f}" != "Release" || continue

        echo " $(${hashCmd} "${f}"  | cut -d" " -f1) $(wc -c "${f}")"

    done

    sed -i "s|$_repoPath/||g" Release
}

function git_commit() {

    git add .

    local commitMessage

    # Generate a commit message based on what has changed use `git status`
    # to get the list of changed files
    for status in R M A C D; do
        git status --porcelain | grep "^${status}" | while read -r line; do
            file=$(echo "$line" | cut -c4-)
            commitMessage="Update ${file} with package details and description"
        done
    done

    git commit -m "${commitMessage:-"Update repository"}" || {
        echo "git commit failed, no changes to commit." >&2
        return 1
    }

    git push origin main || { echo "git push failed!" >&2 ; exit 1 ; }
}

function gen_release () {

        cd "dists/stable" || exit 1

        rm -fv Release Release.gpg InRelease

        echo "$_releaseFile" > Release

        for algo in "MD5Sum md5sum" "SHA1 sha1sum" "SHA256 sha256sum"; do
            read -r hashName hashCmd <<< "$algo"
            do_hash "$hashName" "$hashCmd" >> Release
        done >> Release

        gpg --default-key HowToNebie -abs -o Release.gpg Release
        gpg --default-key HowToNebie --clearsign -o InRelease Release

        test "$?" -eq "0" || { echo "Singing the Release file failed!" >&2 ; exit 1 ; }

}

set -eo pipefail

_appName="mkaptrepo"
_appVersion="$(cat /usr/share/doc/${_appName}/version.txt 2>/dev/null || echo "unknown")"

_home="${HOME}"

# Source the configuration file if it exists
# shellcheck disable=SC1090
source "${_home}/.config/${_appName}/mkaptrepo.conf" 2>/dev/null || {
    echo "Configuration file not found!" >&2 ; exit 1 ; }

_repositoryName="${REPOSITORY_NAME}"
_origin="${ORIGIN:-repository}"
_label="${LABEL:-$_origin}"
_suite="${SUITE:-stable}"
_codename="${CODENAME:-stable}"
_architectures="${ARCHITECTURES:-$(dpkg --print-architecture)}"
_components="${COMPONENTS:-main}"
_maintainer="${MAINTAINER:-$(git config user.name) <$(git config user.email)>}"
_repoPath="${REPO_PATH:-not set}"

_distPath="$_repoPath/dists"

_release="dists/stable/Release"
_inrelease="$_distPath/stable/InRelease"
_packageList="dists/stable/main/binary-amd64/Packages"

_releaseFile="$(cat <<EOF
Origin: $_origin/$_repositoryName
Label: $_label
Suite: $_suite
Codename: $_codename
Version: 1.0
Architectures: $_architectures
Components: $_components
Description: Publicly available APT repository for $_origin
Maintainer: $_maintainer
Date: $(date -Ru)
EOF
)"

_versionInfo="$(cat <<EOF
${_appName} ( version: ${_appVersion}  -  license: GPLv3.0 )
EOF
)"

_helpInfo="$(cat <<EOF
${_versionInfo}

Usage: ${_appName} [OPTION]...

Options
    monitor             Monitor the repository for changes and update the package list.
    daemon              Enable the systemd service for current user: see \`man mkaptrepo\`
                        for more information.
    create              Create a new apt repository (for more information, add --help).
    config              Install the configuration file to \`~/.config/mkaptrepo/mkaptrepo.conf\`
                        and exit.
    help                Show this help message and exit.
    version             Show version information and exit.

Copyright (C) 2025 Michael L. Schaecher <MichaelLeeSchaecher@gmail.com>
EOF
)"

case "$1" in
    monitor                     ) monitor_repo                    ;;
    help                        ) echo "${_helpInfo}"    ; exit 0 ;;
    version                     ) echo "${_versionInfo}" ; exit 0 ;;
    *                           )
        echo "Unrecognized option: $1 called see \`${_appName} help\` for usage information."
        exit 1
    ;;
esac
