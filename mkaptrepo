#!/usr/bin/env bash

# mkaptrepo - A script to create a help manage apt repository
# Copyright (C) 2025  Michael L. Schaecher <MichaelLeeSchaecher@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

function event_log () {

    local _eventType _eventMessage

    _eventType="${1:-unknown}"
    _eventMessage="${2:-No message provided}"

    echo "$_eventType: $_eventMessage"

    case "$_eventType" in
        info|warning|error      )
            logger -t "${_appName}" -p user.${_eventType} "${_eventMessage}"
        ;;
        *                       )
            logger -t "${_appName}" -p user.unknown "${_eventMessage}"
        ;;
    esac

}

function working_dir () {

    cd "$_dirPath/$_repositoryName" || { event_log "error" "$_dirPath/$_repositoryName does not exist." >&2 ; exit 1 ; }

}

function monitor_repo () {

    working_dir

    _monitoringDir="true"

    inotifywait -m -e create,delete,modify,move -r pool/ | while read -r directory events filename; do

    event_log "info" "Detected changes in $directory: $events on $filename"

        update_repo || {
            event_log "error" "Failed to update repository after changes in $directory: $events on $filename" >&2
            exit 1
        }

    done
}

function update_repo () {

    _pwdDir="$(pwd)"
    _packageList="dists/stable/main/binary-amd64/Packages"

    test "$_monitoringDir" = "true" || working_dir

    git add . || { event_log "error" "git add failed, no changes to commit." >&2 ; return 1 ; }

    event_log "info" "Updating repository in $_dirPath/$_repositoryName"

    # shellcheck disable=SC2086
    dpkg-scanpackages --arch amd64 pool/ > $_packageList || {
        event_log "error" "dpkg-scanpackages failed, please check your package files!" >&2
        exit 1
    }

    event_log "info" "Generated package list at $_packageList"

    # Remove `./` prefix from the package list
    sed -i "s|\ ./||g" "$_packageList"

    gzip -k -f "$_packageList"
    xz -k -f "$_packageList"

    gen_release || { event_log "Generating Release file failed!" >&2 ; exit 1 ; }
    git_commit || { event_log "git commit failed!" >&2 ; exit 1 ; }

    # Check if mkaptrepo was updated during apt update
    _upgraded="$(zgrep "$_appName" /var/log/dpkg.log* | grep 'upgrade' |
    tail -n 1 | sed 's/ ^*[0-9][0-9]//g')"

    _date="$(date +%Y-%m-%d)"

    # Compare the date of the last upgrade with the current date
    if test "$_date" = "$_upgraded" ; then
        systemctl --user restart mkaptrepo.service > /dev/null 2>&1 || true
    fi

}

function do_hash () {

    local hashName hashCmd

    hashName=$1
    hashCmd=$2

    event_log "${hashName}:"

    find ./main -type f | while read -r f; do

        f=$(event_log "${f}" | cut -c3-) # remove ./ prefix
        test "${f}" != "Release" || continue

        event_log " $(${hashCmd} "${f}"  | cut -d" " -f1) $(wc -c "${f}")"

    done

    sed -i "s|$_dirPath/||g" Release
}

function git_commit() {

    git add .

    local _commitType _commitMassage

    _commitType=""
    _commitMassage=""

    # Generate a commit message based on what has changed using `git status`
    while read -r status file rest; do
        case "$status" in
            R                   ) _commitType="Renamed" ; file="$rest" ;;
            M                   ) _commitType="Modified"               ;;
            A                   ) _commitType="Added"                  ;;
            C                   ) _commitType="Copied" ; file="$rest"  ;;
            D                   ) _commitType="Deleted"                ;;
            *                   ) continue ;;
        esac

        _commitMassage+="$_commitType $file. "
    done < <(git status --porcelain | awk '{print $1, $2, $3}')

    # Trim trailing punctuation and space
    _commitMassage=$(echo -e "$_commitMassage" | sed 's/[[:space:]]*$//')

    test -n "$_commitMassage" || { event_log "No changes to commit." >&2 ; return 1 ; }

    git commit -m "$_commitMassage" || { event_log "git commit failed!" >&2 ; exit 1 ; }
    git push origin main || { event_log "git push failed!" >&2 ; exit 1 ; }

}


function gen_release () {

        cd "dists/stable" || exit 1

        rm -fv Release Release.gpg InRelease

        event_log "$_releaseFile" > Release

        for algo in "MD5Sum md5sum" "SHA1 sha1sum" "SHA256 sha256sum"; do
            read -r hashName hashCmd <<< "$algo"
            do_hash "$hashName" "$hashCmd" >> Release
        done >> Release

        event_log "info" "Generated Release file in $(pwd)"

        gpg --default-key HowToNebie -abs -o Release.gpg Release
        gpg --default-key HowToNebie --clearsign -o InRelease Release

        test "$?" -eq "0" || { event_log "error" "Singing the Release file failed!" >&2 ; exit 1 ; }

}

function create_repo () {

    local _arch _repo _release _populate _license _licenseLink
    local _licenseTypes _alphaDir _options

    # Set default value from the configuration file
    _arch="${_architectures}"
    _release=""
    _populate="no"

    _licenseLink="https://raw.githubusercontent.com/MichaelSchaecher/license-templates/refs/heads/main/licenses"
    _license="GPL-3"

    _licenseTypes=(
        "AGPL-3" "Apache-2" "BSD-2" "BSD-3" "CDDL" "Eclipse-Public-License"
        "GPL-2" "GPL-3" "LGPL-2" "LGPL-3" "MIT" "Mozilla-Public-License-2"
    )

    _alphaDir=(
        "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m"
        "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
    )

    shift

    # shellcheck disable=SC2222
    # shellcheck disable=SC2221
    while true ; do case "$1" in
        -a|--arch               )
            if [[ "$2" =~ ^[a-zA-Z0-9-]+$ ]] ; then
                _arch="$2" ; shift
            else
                event_log "Invalid architecture specified: $2" >&2
                exit 1
            fi
        ;;
        -r|--release            )
            if [[ "$2" =~ ^[a-z] ]] ; then
                _release="$2" ; shift
            else
                event_log "Invalid release codename specified: $2" >&2
                exit 1
            fi
        ;;
        -n|--name               )
            test -n "$2" || { event_log "Parent directory is not specified!" >&2 ; exit 1 ; }
            mkdir -pv "$_dirPath/$2" || { event_log "Failed to create directory $_dirPath/$2" >&2 ; exit 1 ; }
            _repo="${_dirPath}/$2"
            shift
        ;;
        -p|--populate           ) _populate="yes"                  ; shift       ;;
        -l|--license            )
            if [[ " ${_licenseTypes[*]} " == *" $2 "* ]] ; then
                _license="$2" ; shift
            else
                event_log "Invalid license specified: $2." >&2
                event_log "Available licenses: ${_licenseTypes[*]}" >&2
                exit 1
            fi
        ;;
        -h|--help               ) event_log "${_createRepoHelp}"          ; exit 0    ;;
        -*|--*                  ) event_log "Unrecognized option: $1" >&2 ; exit 1    ;;
        *                       ) if test -n "$2" ; then shift ; else break ; fi ;;
    esac ; done

    # Check if the options are valid by comparing the string command
    event_log "$@" | grep -qE '$_options[@]' || {
        event_log "Invalid options specified!" >&2
        event_log "Available options: $_options" >&2
        exit 1
    }

    cd "$_repo"

    # Setup the dists directory structure
    event_log "Create directory structure in $_repo"

    mkdir -p "dists/$_release/main/binary-$_arch" "pool" || {
        event_log "Failed to create directory structure in $_repo" >&2 ; exit 1 ; }

    if test "$_populate" = "yes" ; then
        # Populate the repository with example packages
        event_log "Create alphabetical directory structure in pool/$_release/main"
        for dir in "${_alphaDir[@]}" ; do
            mkdir -p "pool/main/${dir}" || {
                event_log "Failed to create directory pool/$_release/main/${dir}" >&2 ; exit 1 ; }
        done

        # Add placeholder files to the pool directory for each architecture. This
        # is to help with Git to track even empty directories.
        for dir in "${_alphaDir[@]}" ; do
            touch "pool/main/${dir}/placeholder-${_arch}.txt" || {
                event_log "Failed to create placeholder document!" >&2 ; exit 1 ; }
        done
    fi

    git init || { event_log "Failed to initialize git repository in $_repo" >&2 ; exit 1 ; }

    event_log "Downloading ${_license} license."
    wget -qc "${_licenseLink}/${_license}.txt" -O "LICENSE" || {
        event_log "Failed to download ${_license} license!" >&2 ; exit 1 ; }

    event_log "Generating README file."

    # shellcheck disable=SC2002
    cat "${_readmeFile}" |
        sed "s|Maintainer: |Maintainer: $_maintainer|" |
        sed "s|Date: |Date: $(date -R)|" |
        sed "s|License: |License: <a href=\"LICENSE\">${_license}</a>|" > README.md || {
        event_log "Failed to generate README file!" >&2 ; exit 1 ; }

}

set -eo pipefail

_appName="mkaptrepo"
_appVersion="$(cat /usr/share/doc/${_appName}/version.txt 2>/dev/null || event_log "unknown")"

_home="${HOME}"

_editor="${EDITOR:-nano}"

# Source the configuration file if it exists
# shellcheck disable=SC1090
source "${_home}/.config/${_appName}/${_appName}.conf" 2>/dev/null || {
    event_log "Configuration file not found!" >&2 ; exit 1 ; }

_repositoryName="${REPOSITORY_NAME}"
_origin="${ORIGIN:-repository}"
_label="${LABEL:-$_origin}"
_suite="${SUITE:-stable}"
_codename="${CODENAME:-stable}"
_architectures="${ARCHITECTURES:-$(dpkg --print-architecture)}"
_components="${COMPONENTS:-main}"
_maintainer="${MAINTAINER:-$(git config user.name) <$(git config user.email)>}"
_dirPath="${DIR_PATH}"

_readmeFile="$(pwd)/readme-template.md"

test -n "$_maintainer" || { event_log "Maintainer is not set in the configuration file!" >&2 ; exit 1 ; }
test -n "$_dirPath" || { event_log "Directory path is not set in the configuration file!" >&2 ; exit 1 ; }

_releaseFile="$(cat <<EOF
Origin: $_origin
Label: $_label
Suite: $_suite
Codename: $_codename
Version: 1.0
Architectures: $_architectures
Components: $_components
Description: Publicly available APT repository for $_origin
Maintainer: $_maintainer
Date: $(date -Ru)
EOF
)"

_versionInfo="$(cat <<EOF
${_appName} ( version: ${_appVersion}  -  license: GPLv3.0 )
EOF
)"

_helpInfo="$(cat <<EOF
${_versionInfo}

Usage: ${_appName} [OPTION] flag ARG...

Options
    update                      Update the package list and generate the Release file.
    monitor                     Monitor the repository for changes and update the package list.
    daemonize                   Enable the systemd service for current user: see \`man mkaptrepo\`
                                for more information.
    create                      Create a new apt repository (for more information, add --help).
    config                      Install the configuration file to \`~/.config/mkaptrepo/mkaptrepo.conf\`
                                and exit.
    help                        Show this help message and exit.
    version                     Show version information and exit.

Copyright (C) 2025 ${_maintainer}
EOF
)"

_createRepoHelp="$(cat <<EOF
${_versionInfo}

Usage: ${_appName} create flag ARG...

Options:
    -a, --arch <arch>           Specify the architecture for the repository (default: \`$(dpkg --print-architecture)\`).
    -r, --release <codename>    Specify the codename for the release (default: \`stable\`).
    -n, --name <name>           Specify the name of the repository directory.
    -p, --populate              Populate the repository with alphabetical directory structure and placeholder files.
    -l, --license <license>     Specify the license for the repository (default: \`GPL-3\`).
    -h, --help                  Show this help message and exit.

Copyright (C) 2025 ${_maintainer}
EOF
)"

# Install the configuration file if it does not exist
if test ! -f "${_home}/.config/${_appName}/${_appName}.conf" ; then
    mkdir -p "${_home}/.config/${_appName}"
    cp -a /usr/share/${_appName}/${_appName}.conf "${_home}/.config/${_appName}/"
    ${_editor} "${_home}/.config/${_appName}/${_appName}.conf" || {
        event_log "Failed to open configuration file in editor!" >&2 ; exit 1 ; }
fi

case "$1" in
    update                      ) update_repo            ;;
    monitor                     ) monitor_repo           ;;
    daemonize                   )
        systemctl enable --now --user mkaptrepo.service || {
            event_log "Failed to enable mkaptrepo service." >&2
            exit 1
        }
        exit 0
    ;;
    create                      ) create_repo "$@"       ;;
    config                      )
        test ! -f "${_home}/.config/${_appName}/mkaptrepo.conf" ||
            $_editor "${_home}/.config/${_appName}/mkaptrepo.conf"
    ;;
    help                        ) event_log "${_helpInfo}"    ;;
    version                     ) event_log "${_versionInfo}" ;;
    *                           )
        event_log "Unrecognized option: $1 called see \`${_appName} help\` for usage information."
        exit 1
    ;;
esac

wait ; exit 0
